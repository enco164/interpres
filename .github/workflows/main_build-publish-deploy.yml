name: Build, Publish, Deploy

on:
  push:
    branches:
      - main

jobs:
#  build-docker-and-publish:
#    runs-on: ubuntu-latest
#    environment: main
#    strategy:
#      matrix:
#        include:
#          - name: api-gateway
#            path: ./server/api-gateway
#          - name: client
#            path: ./client
#          - name: core
#            path: ./server/core
#          - name: integration
#            path: ./server/integration
#          - name: reverse-proxy
#            path: ./reverse-proxy
#          - name: user-management
#            path: ./server/user-management
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Use Node.js 14
#        uses: actions/setup-node@v1
#        with:
#          node-version: '14'
#
#      - name: Determine Docker Tag
#        run: echo "DOCKER_TAG=${{ github.sha }}"  >> $GITHUB_ENV
#      - run: |-
#          echo DOCKER_TAG:  $DOCKER_TAG
#
#      - name: DockerHub login
#        env:
#          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
#        run: |
#          docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
#
#      - name: Build docker image
#        run: |
#          docker build -t interpres/${{ matrix.name }}:latest -t interpres/${{ matrix.name }}:$DOCKER_TAG ${{ matrix.path }}
#
#      - name: Push docker image
#        run: |
#          docker push --all-tags interpres/${{ matrix.name }}

  deploy-to-gcp:
    runs-on: ubuntu-latest
    environment: main
#    needs: build-docker-and-publish
    steps:
      - uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCLOUD_SERVICE_KEY }}
          project_id: ${{ secrets.GOOGLE_PROJECT_ID }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker
      - run: |-
          gcloud config list
      # Get the GKE credentials, so we can deploy to the cluster
      - run: |-
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --region ${{ secrets.GKE_REGION }}

      - name: Deploy
        run: |-
          cd ./gcp/continuous-deployment
          chmod +x ./deploy.sh
          ./deploy.sh latest

